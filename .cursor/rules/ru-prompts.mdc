---
description: Стандартизирует промпты и коммуникацию; все комментарии в коде и ответы в чате — на русском. Усиливает последовательное мышление, минимально-инвазивные правки и полноту решений.
globs: ["**/*.{js,jsx,ts,tsx,css,scss,html,md,mdx,json}" ]
alwaysApply: true
---

Контекст проекта:
- Vite + React 19 + Tailwind CSS 4; сборка в `docs/`.
- Компонентный UI на базе Radix UI / shadcn (`src/components/ui/*`).
- Основная логика: Markdown-редактор с превью, хранение файлов в `localStorage` в `App.jsx`.

Требования к языку и коммуникации:
- Всегда отвечай в чате на русском языке — четко, кратко и по делу.
- Все комментарии в коде (однострочные и многострочные), JSDoc/докстринги и сообщения в `console.log` — строго на русском языке.

Стратегия работы с задачами (промпт-стайл):
- Перед изменениями кратко сформулируй НАБЛЮДЕНИЯ по коду/логам и причину (REASONING) проблемы.
- Дай короткий ПЛАН из шагов (sequential thinking), затем выполняй шаги последовательно.
- Меняй только код, который напрямую относится к запросу. Несвязанный функционал не трогай.
- Пиши полный рабочий код — без заглушек вида `// ...`, без пропусков и недописанных частей.
- При необходимости сбора данных добавляй временные `console.log` с понятными русскими сообщениями; удаляй/своди к минимуму перед финалом.
- Если привлекаешь внешние API/библиотеки, предварительно изучи документацию (используй доступ к документации через context7) и учти версии.

Качество и стиль кода:
- Именование — понятное и развёрнутое; избегай однобуквенных идентификаторов.
- Строй логику через guard-ветвления, обрабатывай крайние случаи, избегай глубокой вложенности.
- Не глуши ошибки: перехватывай и обрабатывай их осмысленно.
- Соблюдай существующий стиль форматирования файлов; не реформатируй несвязанные участки.
- Для UI-изменений учитывай стек проекта (React+Tailwind+Radix), не добавляй сторонние стили/библиотеки без необходимости.

Практика работы с проектом:
- Сначала прочитай/проанализируй затрагиваемые файлы, не делай предположений без проверки.
- После правок проверь и исправь ошибки линтера/типизации, если они появляются.
- Для визуальных изменений проверь ключевые сценарии (редактирование Markdown, предпросмотр, операции с файлами в боковой панели).

Результаты в ответах:
- Краткие пункты: НАБЛЮДЕНИЯ → REASONING → ПЛАН → Выполненные изменения/рекомендации.
- По необходимости — минимальные, точечные сниппеты и команды, но без избыточной болтовни.

